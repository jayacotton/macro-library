;  work a bit like unix.  
;
;  find . -name string (print assumed)      Search the current drive 
;          ^^^^  full or partial name string.
;
;  find .  Prints all the file names on the current drive.
;
;  find * -name string     Search all the drives for the file name 
;  
#include "../../wto.mac"
#include "../../dreg.mac"
#include "../../seldrive.mac"
#include "../../fflush.mac"
#include "../../pre.mac"
#include "../../post.mac"
#include "../../prestack.mac"
#include "../../cpmcommon.mac"
#include "../../fcb.mac"
#include "../../fileopen.mac"
#include "../../fileseek.mac"
#include "../../fread.mac"
#include "../../fileclose.mac"
#include "../../fmerr.mac"
#include "../../packfd.mac"
#include "../../memset.mac"
#include "../../strcpy.mac"
#include "../../setdma.mac"
#include "../../printl.mac"
#include "../../puts.mac"
#include "../../putc.mac"
#include "../../display.mac"
#include "../../startp.mac"
#include "../../radix.mac"
#include "../../mod.mac"
#include "../../comp.mac"
#include "../../divide.mac"
#include "../../multip.mac"
#include "../../binascii.mac"
#include "../../snap.mac"
#include "../../crlf.mac"
#include "../../printerrno.mac"
#include "../../strlen.mac"
#include "../../strchar.mac"
#include "../../getopt.mac"
#include "../../fputc.mac"
#include "../../filecreat.mac"
#include "../../filedelete.mac"
#include "../../getcurent.mac"
#include "../../seldisk.mac"
#include "../../gettpa.mac"
#include "../../bputc.mac"
#include "../../bflush.mac"
#include "../../pushall.mac"
#include "../../popall.mac"

	common
	org	100h
	pre
	startp	front,list,count
;
; get the default drive number
;
	getcurent
	sta	default
;
; get end address of TPA
;
	gettpa	fbase
;
; flood memory with 1a's
;
	lxi	d,0c000h
	lxi	h,pend	; point to the end of the program
l123	inx	h
	mvi	m,1ah	; stuff in an eof
	push	h
	push	d
	call	usgt	; is HL > DE 
	pop	d
	pop	h
	jnc	l123	; NC - NO
;
; dredg through the system code and find all the known drives
;
	; Are we running CP/Net ?
; This is the network config table 
;Initconfigtbl:
; db 0000$0000b ; network status byte
; db slave$ID ; slave processor ID number
; db 84h,0 ; A: Disk device
; db 81h,0 ; B: "
; db 82h,0 ; C: "
; db 83h,0 ; D: "
; db 80h,0 ; E: "
; db 85h,0 ; F: "
; db 86h,0 ; G: "
; db 87h,0 ; H: "
; db 88h,0 ; I: "
; db 89h,0 ; J: "
; db 8ah,0 ; K: "
; db 8bh,0 ; L: "
; db 8ch,0 ; M: "
; db 8dh,0 ; N: "
; db 8eh,0 ; O: "
; db 8fh,0 ; P: "
; db 0,0 ; console device
; db 0,0 ; list device:
; db 0 ; buffer index
; db 0 ; FMT
; db 0 ; DID
; db slave$ID ; SID
; db 5 ; FNC
	mvi	a,0
	sta	index
	mvi	c,getver
	call	bdos
	mov	a,h
	ani	2
	jz	nocpnt
; Get the network table
	mvi	c,cfgtbl
	call	bdos
	shld	netcfg
	mvi	b,16
ntloop	inx	h
	inx	h	
	mov	a,m	; start at drive a
; we don't care if the drive is local or network, but just that
; its there.
	cpi	0	; assumes null means not preset	
	jz	ntskip
	push	h
	lxi	h,drivlst ; populate the drivelist 
	mov	e,b  	; build offset from index
	mvi	d,0
	dad 	d
	mov	a,b
	adi	'A'	; make it ascii
	mov	m,a
	pop	h
; djnz ntloop
ntskip	db	10h
	dw	ntloop
	jmp	gohere
	; we are not running CP/Net
nocpnt	mvi	a,0	; start at drive a
	sta	index	; preload index
stloop	mov	c,a	; copy drive nr
	seldriv
; if hl = 0 then no drive there
	mov	a,h	; get H to a
	ora	l	; or the bits
;
; IF zero and the total number of drives is 
; not 16, then keep going.
;
	jz 	next	; are there any ones
	lxi	h,drivlst ; drive list string pointer
	lda	index	; get the index
	mov	e,a	; and create a pointer to the string
	mvi	d,0
	dad	d
	adi	'A'	; Make it ASCII
	mov	m,a	; Save it
next	lda	index
	inr	a
	sta	index 
	cpi	16
	jnz	stloop	; any more to do ?
;
; return the system to the default drive, i.e. the
; active one when we started the find command.
;
gohere	lda	default
	seldisk

; make a dummy file name string.
	packfd	fifcb,'????????.???'
	lda	count
	ora	a
	jm	skip
;
; use get opt to process option flags 
; and setup the wild card file name and
; wild card drive names.....
; also handle all the listing options
;
startlp	getopt	count,list,'N:L:D:U'
	cpi	'L'	; list to a file
	jz	listf
	cpi	'N'	; find a name
	jz	namef
	cpi	'D'	; look only on this drive
	jz	drivf
	cpi	'U'	; get user number
	jz	userf
	cpi	'.'	; 
	jz	dotf
	cpi	-1	; errors
	jz	skip
	cpi	0	; option not found
	jz	usage
	jmp	startlp	; go to next option
usage	wto	'-n[filename] -d[drive] -l[listfilename] -u[user number]'
	jmp	done	
dotf	equ	$
	mvi	a,1
	sta	flagdot
	jmp	startlp
listf	equ	$
	mvi	a,1
	sta	flagl
; hl -> list file name
	lxi	d,lifcb
	call	packfn
	lda	default
	sta	lifcb
; set drive to default drive
	lda	default
	inr	a	; test
	seldisk
;
	lda	default
	inr	a
	sta	lifcb
	delete	lifcb
	lda	default
	inr	a
	sta	lifcb
	create	lifcb
	lda	default
	inr	a
	sta	lifcb
	open	lifcb
	memset	libuf,01ah,128
;  make a file name to dump the list on
	jmp	startlp
namef	equ	$
	mvi	a,1
	sta	flagn	
; hl -> file name
	lxi	d,fifcb
	call	packfn
	jmp	startlp
drivf	equ	$
	mvi	a,1
	sta	flagd
; hl -> drive letter
	mov	a,m
	sbi	'A'
	;dcr	a
	sta	drivlet	
	sta	index
	jmp	startlp
userf	equ	$
	mvi	a,1
	sta	flagu
; hl -> user number (ascii string)
; range 0 to 15

	jmp	startlp
;
; process drive select 
;
skip	mvi	a,0	; preset drive to a:
	sta	curdriv
	sta	index
; see if the special case '.' was entered
	lda	flagd
	cpi	0
	jz	sknext
;fixme need to resolve the drive number here
	lda	drivlet	; get requested drive
	sta	index
	sta	curdriv
sknext	equ	$
;
scanlp	equ	$
;
; select drive
;
	lxi	h,fifcb
	lda	index	
	mov	m,a
	seldisk
	call	dorest
	call	nxtdriv
;
; test for end of drive list
;
; if the drive search was a . search then all or a drive letter then we only
; search one drive, else all of them.
;
	lda	flagdot
	ora	a
	jnz	scanlp
	jmp	done	
;
; index is inited to 0 or set to the drive letter 
; we want to search.  The dummy up stairs sets the
; drive value to what was given... fix that.
;
nxtdriv	lda	index		; using index to access drive list
	inr	a		; up to next drive
	sta	index		; and save it
	cpi	16		; off the end ?
	jz	outaher		; bail out
	lxi	h,drivlst	; get the drive table
	mov	e,a
	mvi	d,0
	dad	d
	mov	a,m		; pick up the drive letter
	cpi	'.'		; is there a drive there ?
	jz	nxtdriv		; loop back to pick up next drive
	cpi	0
	jz	nxtdriv		; did we run off the end ?
	sbi	'A'		; make it binary
	sta	curdriv
; SO, if we gave the -d option, then index was set to the
; binary drive value to be searched.  And only that drive
	lda	flagd
	cpi	0
	rz
outaher	pop	hl	; blow off the return address
	jmp	done	; and bail out
;
; search for the first directory entry
;
dorest	equ	$
	lxi	d,fifcb	; fcb 
	mvi	c,srchf	; search first
	call	bdos
	sta	errno
	sta	rcode	; rcode is the index
	inr	a
	rz		; end of list ?
	call	prtname	; print
;
; loop through the next entries
;
loop	lxi	d,fifcb ; fcb
	mvi	c,srchn	; search next
	call	bdos
	sta	errno
	sta	rcode	; index
	inr	a
	rz
	call	prtname	; print
	jmp	loop
;
; print file name in fcb 
;
; rcode has the value return from find first and next 
; directory entry.
; this is an index into the dskbuffer where the file name is
; located.  there can be up to 4 records in the buffer.
;
prtname	equ	$
;
; if console active, quit
;
	mvi	c,getcos	; check console
	call	bdos
	ora	a		; anything ?
	jnz	done
;
	lxi	h,dskbuf  
;
; rcode has the index
;
	lda	rcode	
	ani	3
; multiply by 32 (size of entry in buffer)
	rlc
	rlc
	rlc
	rlc
	rlc
	mvi	d,0
	mov	e,a
; and bump up to the string
	dad	d
	inx	h	; hl has pointer to name string.
	lda	index	
	adi	'A'
	push	psw	; save drive letter on stack
	lda	flagl
	cpi	0
	jnz	wfile
; break these up into 2 functions

;
; write on the console
;
wcon	pop	psw	; get the drive letter
; write drive letter string
	putc
	putc	':'
; set up the counter
	mvi	b,8+3
wcon1	mov	a,m	; get a byte
	inx	h	; bump index
	putc
	dcr	b	; count the byte
	jnz	wcon1	; loop till done
	crlf
	ret
;
; write on the disk file
;
wfile	equ	$
	pop	psw	; get the drive letter
	push	h	; save hl (bputc eats all registers)
; write the drive letter 
	bputc	lcurt,fbase	
	bputc	lcurt,fbase,':'
	pop	h	; get back hl
	mvi	b,8+3	; b is a counter
wfile1	mov	a,m	; get a byte
	inx	h	; bump index
	push	h	; save hl - fputc eats all
	push	b	; save bc my counter
; write the file name
	bputc	lcurt,fbase	
	pop	b	; get back the counter	
	pop	h	; and hl
	dcr	b	; count the character
	jnz	wfile1	
; put in a cr,lf... may need to change this
	bputc	lcurt,fbase,0ah
	bputc	lcurt,fbase,0dh
	ret
done	equ	$
	lda	flagl
	cpi	0
	jz	d1one
	lda	default
	inr	a
	seldisk
	bflush	lifcb,pend,lcurt
	close	lifcb
d1one	equ	$
	post
	fmerr
	strcpy
	comp
	mod
	div
	mul
;	memset
;
; global storage
;
	prestack
netcfg	dw	0
drivlst	db	'................',0
index	db	0
default	db	0
filenm	ds	8+3	; space for constructing the file name
drivcnt	dw	0	; store the drive count here.
dskbuf	equ	80h
fifcb	fcb
	ds	24	; guard space ?????
lifcb	fcb
	ds	24	; guard space ?????
curdriv	db	0
diskflg	db	0	; 0 = look on current drive only.
			; 1 = search all drives on the system.
fileflg	db	0	; 0 = find a file by name
			; 1 = find files by wild card
wild	ds	32	; storage for file name, or wild card key
flagn	db	0
flagl	db	0
flagd	db	0
flagu	db	0
usernr	db	0
drivlet db	0
flagdot	db	0
rcode	db	0
fbase	dw	0	; practical end of tpa
lcurt	dw	pend	; current address of buffer pointer
libuf	ds	128
bigbuf	ds	128
pend	equ	$	; start of buffer
	end
