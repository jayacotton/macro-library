;
; test the radix converion macro
;
#include "wto.mac"
#include "pre.mac"
#include "post.mac"
#include "prestack.mac"
#include "cpmcommon.mac"
#include "crlf.mac"
#include "radix.mac"
#include "mod.mac"
#include "comp.mac"
#include "divide.mac"
#include "multip.mac"
#include "binascii.mac"
#include "printl.mac"
#include "memset.mac"
#include "pushall.mac"
#include "popall.mac"

	common
	org	100h
	pre
;
; seed the counter to 1
;
	lxi	h,1
	shld	prim
loop	equ	$
;
; print in binary
;
	lhld	prim		; get the number to convert
	lxi	d,2		; set the convertion mode
; compute a radix
	radix			
; save all the registers
	pushall			
; clear the text buffer
	memset	bigbuf,0,25	
; restore all the registers
	popall			
; convert the radix to ascii
	binasci	s,bigbuf,,16	
; print out the buffer
	printl	bigbuf		
	mvi	c,conso		; put out a space
	mvi	e,' '
	call	bdos
;
; print in decimal
;
	lhld	prim
	lxi	d,10
	radix
	pushall
	memset	bigbuf,0,25
	popall
	binasci	s,bigbuf,,5
	printl	bigbuf
	mvi	c,conso
	mvi	e,' '
	call	bdos
;
; print in octal
;
	lhld	prim
	lxi	d,8
	radix	
	pushall
	memset	bigbuf,0,25
	popall
	binasci	s,bigbuf,,6
	printl	bigbuf
	pushall
	mvi	c,conso
	mvi	e,' '
	call	bdos
;
; print in hex
;
	lhld	prim
	lxi	d,16
	radix	
	pushall
	memset	bigbuf,0,25
	popall
	binasci	s,bigbuf,,4
	printl	bigbuf
	crlf
;
; shift left 1 position
;
	lhld	prim
	dad	h
	shld	prim
;
; check for end state
;
	mov	a,l
	add	h
	cpi	0
	jz	done
	jmp	loop
; end of task clean up
done	post			
; local storage for stack
	prestack		
; the mod code	
	mod			
; the compair code
	comp			
; multiply	
	mul			
; divide code
	div			
prim	dw	0
bigbuf	ds	25
	end
