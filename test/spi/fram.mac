;
; test the connection to the fram chip on the MT011 board.
;
#include "spisel.mac"
#include "spiwrt.mac"
#include "spirde.mac"
#include "spidef.mac"
#include "pre.mac"
#include "prestack.mac"
#include "post.mac"
#include "wto.mac"
#include "cpmcommon.mac"
#include "startp.mac"
#include "getopt.mac"
#include "multip.mac"
#include "hextohl.mac"
#include "snap.mac"
#include "dreg.mac"

DEBUG	equ	0

	org	100h
	common
	spidef
	pre
	startp	front,list,count
startlp	getopt	count,list,'R:W:I:C:B:S:C:H'
	cpi	'H'
	jz	Hello
	cpi	'C'
	cz	check
	cpi	'R'
	cz	FRAMrd
	cpi	'C'
	cz	Count
	cpi	'S'
	cz	Status
	cpi	'B'
	cz	Byte
	cpi	'W'
	cz	FRAMwr
	cpi	'I'
	cz	FRAMInit
	cpi	0
	jz	usage
	cpi	-1
	jz	process
	jmp	startlp
usage	wto	'-r[address] -c[count] -w[address] -b[byte]'
	wto	' address: 3456 or abcd no 0x no h'
	wto	' count: in hex no 0x no h'
	wto	' byte: in hex no 0x no h'
	jmp	exit
; read
FRAMrd	equ	$	; hl -> address ascii string
			; the string is null terminated
	hextohl
	shld	addr 
	mvi	a,1
	sta	RFlag
	mvi	a,'R'
	ret
; count
Count	equ	$
	hextohl
	shld	size	
	mvi	a,'C'
	ret
; byte
Byte	equ	$
	hextohl
	mov	a,l
	sta	byte
	mvi	a,'B'
	ret
; write
FRAMwr	equ	$	; hl -> address ascii string
			; next paramter is at list[n+1]
	mvi	a,1
	sta	WFlag
	ret
; init fram with a known pattern
FRAMInit equ	$
	mvi	a,1
	sta	IFlag
	mvi	a,'W'
	ret
; read the status register
Status	equ	$
	mvi	a,1
	sta	SFlag
	mvi	a,'S'
	ret
;
; do something
;
process	equ	$
	lda	IFlag
	cpi	1
	cz	Iloop
	lda	SFlag
	cpi	1
	cz	Sloop
	lda	RFlag
	cpi	1
	cz	rloop
	jmp	Wloop
; read some bytes and print them
; read size bytes from the FRAM and store
; select FRAM
rloop	spisel	FRAM
; issue read command
	spiwrt	FRMREAD
; issue read address
	spiwrt	0
	spiwrt	0
	lxi	h,Local
; read all 8k of ram
	lxi	b,8192
; read a byte, it will supply bytes until you stop
; or it runs out.  max address 2000h.
;
RDloop	spirde
	mov	m,a
	inx	h
	dcx	b
; check for done
	mov	a,b
	ora	c
	jnz	RDloop
	spisel	PARK
;  Then snap them out.
;
	lhld	size
	mov	b,l
	lxi	h,Local
	snap
	ret
	jmp	exit
; status processing
SError	mvi	c,128
	spisel	PARK	
	spisel	FRAM
	spiwrt	FRMRDSR
	spirde
	cpi	0ffh
	jnz	Sloop
	dcr	c
	jnz	SError
	jmp	exit
Sloop	equ	$
	spisel	FRAM
;	spiwrt	FRMWREN
	spiwrt	FRMRDSR
	spirde	
	cpi	0ffh
	jz	SError
	push	psw	
	spisel	PARK
	pop	psw
; reg a has the status byte
	dreg
	wto	'Reg A has the status byte'	
	ret
	jmp	exit
; Write some bytes
;
Wloop	lda	WFlag
	cpi	1
	jnz	exit
;
; write the local buffer to the FRAM chip
;
	; select the FRAM
Wrt	spisel	FRAM
	; turn on write enable
	spiwrt	FRMWREN
	spisel	PARK
	spisel	FRAM	
	; command a write
	spiwrt	FRMWRT
	; at address 00
	spiwrt	0
	spiwrt	0
	lxi	h,Local
	lxi	b,8192
Wl1	mov	a,m
	; write a byte
	spiwrt
	inx	h
	dcx	b
	mov	a,c
	ora	b
	jnz	Wl1
	; turn off write enable
	spisel	PARK
	spisel	FRAM	
	spiwrt	FRMWDRI
	; deselect FRAM
	spisel	PARK
	jmp	exit
;
check	lhld	size
	mov	b,l
	lxi	h,Local
	snap
	ret
;
Hello	call	Iloop
	lxi	h,msg
	lxi	d,Local
Hloop	mov	a,m
	stax	d
	cpi	0
	jz	Wrt
	inx	h
	inx	d
	jmp	Hloop
msg	db	'Hello World From FRAM',0
; Init memory with a pattern
Iloop	equ	$
	lxi	h,Local
	lxi	b,8192
Il1	mvi	m,55h
	inx	h
	dcx	b
	mvi	m,0aah
	inx	h
	dcx	b
	mov	a,c
	ora	b
	jnz	Il1
	lhld	size
	mov	b,l
	lxi	h,Local
	snap
	ret
exit	equ	$
	post
	prestack
	mul
addr	dw	0
size	dw	0
byte	db	0
RFlag	db	0
WFlag	db	0
SFlag	db	0
IFlag	db	0
Local	ds	8192
	end
